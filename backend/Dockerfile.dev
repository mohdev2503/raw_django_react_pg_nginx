# # Use a lightweight Python image
# FROM python:3.12.3-alpine

# # Set working directory
# WORKDIR /usr/src/app

# # Environment variables to improve performance
# ENV PYTHONDONTWRITEBYTECODE 1
# ENV PYTHONUNBUFFERED 1

# # Install system dependencies for PostGIS and Django
# RUN apk add --no-cache \
#     libpq postgresql-dev gcc musl-dev python3-dev libffi-dev

# # Install pip dependencies first for better caching
# COPY --chown=1000:1000 ./requirements.txt /usr/src/app/requirements.txt
# RUN pip install --upgrade pip && pip install -r requirements.txt

# # Copy the entrypoint script
# COPY --chown=1000:1000 ./entrypoint.sh /usr/src/app/entrypoint.sh
# RUN chmod +x /usr/src/app/entrypoint.sh

# # Copy the entire project
# COPY --chown=1000:1000 . /usr/src/app/

# # Expose port 8000 for Django development
# EXPOSE 8000

# # Use entrypoint script
# ENTRYPOINT ["/usr/src/app/entrypoint.sh"]

# # Default command: run Django dev server
# CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]

# ----------------------------------------------------#
# Use a lightweight Python image
FROM python:3.12.3-alpine

# Set working directory
WORKDIR /usr/src/app

# Environment variables to improve performance
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# Install system dependencies for PostGIS and Django
RUN apk add --no-cache \
    postgresql-dev \
    postgresql-client \
    geos-dev \
    gdal-dev \
    proj-dev

# Install pip dependencies first for better caching
COPY ./requirements.txt /usr/src/app/requirements.txt
RUN pip install --upgrade pip && pip install -r requirements.txt

# Copy the entrypoint script and ensure it is executable
COPY ./entrypoint.sh /usr/src/app/entrypoint.sh
# RUN chmod +x /usr/src/app/entrypoint.sh

# Copy the entire project
COPY . /usr/src/app/

# Expose port 8000 for Django development
EXPOSE 8000

# Use entrypoint script
ENTRYPOINT ["/usr/src/app/entrypoint.sh"]

# Default command: run Django dev server
CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]